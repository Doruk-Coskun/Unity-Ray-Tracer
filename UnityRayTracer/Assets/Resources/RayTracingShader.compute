// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

uint3 _id;

static const float PI = 3.14159265f;

uint _MaxRecursionDepth;

/*-----Skybox-----*/

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float3 _BackgroundColor;

/*-----Camera-----*/

float4x4 _CameraToWorldMatrix;
float4x4 _CameraInverseProjectionMatrix;

/*-----Lights-----*/

float3 _DirectLightDirection;
float3 _DirectLightIntensity;

float3 _AmbientLight;

uint _PointLightCount;

struct PointLight 
{
    float3 position;
    float3 intensity;
};

StructuredBuffer<PointLight> _PointLightList;

/*-----Material-----*/

uint _MaterialCount;

struct MaterialData 
{
    float3 ambientRef;
    float3 diffuseRef;
    float3 specularRef;
    float3 mirrorRef;
    float3 transparency;
    
    float phongExponent;
    float refractionIndex;
};

StructuredBuffer<MaterialData> _MaterialList;

/*-----SceneGeometry-----*/

uint _SphereCount;
uint _MeshCount;

uint _SizeOfVertexList;
uint _SizeOfTriangleList;

struct Sphere
{
    uint materialID;
    float3 position;
    float radius;
};

struct Bounds3
{
    float3 pMin;
    float3 pMax;
};

struct Triangle
{
    float3 indices;
};

struct MeshData 
{
    uint materialID;
    
    uint triangleIndexStart;
    uint triangleIndexEnd;
    uint vertexIndexStart;
    
    uint BVHNodeOffset;
};

StructuredBuffer<Sphere> _SphereList;

StructuredBuffer<float3> _VertexList;
StructuredBuffer<Triangle> _TriangleList;
StructuredBuffer<MeshData> _MeshDataList;

/*-----BVH Structures-----*/

uint _BVHNodeCount;

struct LinearBVHNode 
{
    Bounds3 bounds;
    int primitiveOffset;
    uint secondChildOffset;
};

StructuredBuffer<LinearBVHNode> _BVHNodeList;

/*-----Ray & RayHit-----*/

struct Ray 
{
    float3 origin;
    float3 direction;
    float3 energy;
    bool isInObject;
};

struct RayHit 
{
    float3 position;
    float distance;
    float3 normal;
    uint materialID;
};

/*--------------------------*/

Ray CreateRay(float3 origin, float3 direction) 
{
    Ray ray;
    ray.origin = origin;
    ray.direction = normalize(direction);
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.isInObject = false;
    return ray;
}

RayHit CreateRayHit() 
{
    RayHit rayHit;
    rayHit.position = float3(0.0f, 0.0f, 0.0f);
    rayHit.distance = 1.#INF;
    rayHit.normal = float3(0.0f, 0.0f, 0.0f);
    rayHit.materialID = 0;
    
    return rayHit;
}

Ray CreateCameraRay(float2 uv) 
{
    float3 origin = mul(_CameraToWorldMatrix, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    float3 direction = mul(_CameraInverseProjectionMatrix, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorldMatrix, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.materialID = sphere.materialID;
    }
}

bool IntersectTriangle(Ray ray, inout RayHit bestHit, MeshData meshData, uint triangleOffset) 
{
    Triangle tri = _TriangleList[meshData.triangleIndexStart + triangleOffset];
    float3 vert0 = _VertexList[tri.indices.x + meshData.vertexIndexStart];
    float3 vert1 = _VertexList[tri.indices.y + meshData.vertexIndexStart];
    float3 vert2 = _VertexList[tri.indices.z + meshData.vertexIndexStart];
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    float inv_det = 1.0f / det;
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    // calculate U parameter and test bounds
    float u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    // calculate V parameter and test bounds
    float v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    // calculate t, ray intersects triangle
    float t = dot(edge2, qvec) * inv_det;
    
    if (t <= 0 || t > bestHit.distance)
        return false;
    

    
    bestHit.distance = t;
    float3 normal = normalize(cross(edge1, edge2));
    bestHit.normal = normal;
    
    bestHit.position = ray.origin + t * ray.direction;
    bestHit.materialID = meshData.materialID;
    
    return true;
}

bool RayAABBFinalImprovement(Ray ray, int i) 
{
    float3 p0 = _BVHNodeList[i].bounds.pMin;
    float3 p1 = _BVHNodeList[i].bounds.pMax;
    float3 invD = rcp(ray.direction);

    float3 t0 = (p0 - ray.origin) * invD;
    float3 t1 = (p1 - ray.origin) * invD;
    float3 tmin = min(t0,t1), tmax = max(t0,t1);
  
    float pMin = max(tmin.z, max(tmin.x, tmin.y));
    float pMax = min(tmax.z, max(tmax.x, tmax.y));
  
    return pMin <= pMax;
}

// TODO: Pass meshData index rather than meshData?
void IntersectBVH(Ray ray, inout RayHit bestHit, int index)
{
    uint nodeOffset = _MeshDataList[index].BVHNodeOffset;

    uint nodesToVisit[64];
    uint toVisitOffset = 0, currentNodeIndex = 0;
    LinearBVHNode currentNode;
    
    [loop] while (true)
    {
        currentNode = _BVHNodeList[nodeOffset + currentNodeIndex];
        if (RayAABBFinalImprovement(ray, nodeOffset + currentNodeIndex))
        {
            if (currentNode.primitiveOffset >= 0)
            {
                IntersectTriangle(ray, bestHit, _MeshDataList[index], currentNode.primitiveOffset);
                
                if (toVisitOffset == 0) 
                {
                    break;
                }
                toVisitOffset--;
                currentNodeIndex = nodesToVisit[toVisitOffset];
            }
            else 
            {
                nodesToVisit[toVisitOffset] = currentNode.secondChildOffset;
                toVisitOffset++;
                currentNodeIndex = currentNodeIndex + 1;
            }
        }
        else
        {
        //Result[_id.xy] = float4(0, 255, 0, 1);
            if (toVisitOffset == 0) 
            {
                break;
            }
            toVisitOffset--;
            currentNodeIndex = nodesToVisit[toVisitOffset];
        }
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    
    for (uint i = 0; i < _SphereCount; i++) 
    {
        IntersectSphere(ray, bestHit, _SphereList[i]);
    }
    
    for (uint i = 0; i < _MeshCount; i++)
    {
        IntersectBVH(ray, bestHit, i);
    }
    
    return bestHit;
}

float3 CalculateDirectLight(RayHit hit, float3 viewVector) 
{
    float3 color = float3(0.0, 0.0, 0.0);
    
    color += saturate(dot(hit.normal, -_DirectLightDirection)) * _DirectLightIntensity * 
        _MaterialList[hit.materialID].diffuseRef;
        
    float3 h = normalize(-_DirectLightDirection + -viewVector);
    float NdotH = saturate(dot(h, hit.normal));
    //Calculate Blinn-Phong Shader
    color +=  pow(NdotH, _MaterialList[hit.materialID].phongExponent) *
        _MaterialList[hit.materialID].specularRef * _DirectLightIntensity;
    
    return color;
}

float3 CalculatePointLight(RayHit hit, uint PLIndex, float3 viewVector) 
{
    float3 color = float3(0.0, 0.0, 0.0);

    float3 toLightVector = _PointLightList[PLIndex].position - hit.position;
    float distance = length(toLightVector);
        
    Ray toLightRay = CreateRay(hit.position + hit.normal * 0.001f, normalize(toLightVector));
    RayHit shadowHit = Trace(toLightRay);
    
    if (shadowHit.distance < distance) 
    {
        return color;
    }
    else 
    {
        // Diffuse shading
        color += saturate(dot(hit.normal, toLightRay.direction)) * _PointLightList[PLIndex].intensity *
            _MaterialList[hit.materialID].diffuseRef / (distance * distance);
        
        // Specular shading
        //Calculations of half vector and 
        float3 h = normalize(toLightRay.direction + -viewVector);
        float NdotH = saturate(dot(h, hit.normal));
        //Calculate Blinn-Phong Shader
        color +=  pow(NdotH, _MaterialList[hit.materialID].phongExponent) *
            _MaterialList[hit.materialID].specularRef * _PointLightList[PLIndex].intensity / (distance * distance);
        
        
        return color;
    }
}

float3 CalculateLights(Ray ray, RayHit hit) 
{
    float3 color = float3(0.0, 0.0, 0.0);
    
    ray.origin = hit.position + hit.normal * 0.001f;
    
    color += _MaterialList[hit.materialID].ambientRef * _AmbientLight;
    
    for (uint i = 0; i < _PointLightCount; i++) 
    {
        color += CalculatePointLight(hit, i, ray.direction);
    }
    
    color += CalculateDirectLight(hit, ray.direction);
    
    return color;
}

float3 CalculateFresnelEquation(Ray ray, RayHit hit) 
{
    float n1 = 1; // We assume one of the phases ray passes through is air, which has n = 1;
    float n2 = _MaterialList[hit.materialID].refractionIndex;
    
    
    float R_0 = pow((n1 - n2) / (n1 + n2), 2);
    
    float cosi = dot(ray.direction, hit.normal);
    cosi = cosi < 0? -cosi : cosi;
    
    return R_0 + (1 - R_0) * pow((1 - cosi), 5);
}

float3 CalculateRefractedRay(Ray ray, RayHit hit) 
{
    float cosi = dot(ray.direction, hit.normal); 
    float n1 = 1, n2 = _MaterialList[hit.materialID].refractionIndex; 
    float3 N = hit.normal; 
    if (cosi < 0) { cosi = -cosi; } else { n1 = n2; n2 = 1; N = -N; } 
    float n = n1 / n2; 
    float k = 1 - n * n * (1 - cosi * cosi);     
    
    return k < 0? float3(0.0, 0.0, 0.0) : n * ray.direction + N * n * cosi - N * sqrt(k); 
}

float3 CalculateReflectionOnSurface(Ray ray, RayHit hit) 
{
    float3 reflectionColor = float3(0.0, 0.0, 0.0);
    
    Ray reflectedRay = CreateRay(hit.position, reflect(ray.direction, hit.normal));
    reflectedRay.origin = hit.position + hit.normal * 0.001f;
    reflectedRay.energy *= _MaterialList[hit.materialID].mirrorRef;
    
    RayHit reflectedHit = Trace(reflectedRay);
    reflectionColor += reflectedRay.energy * CalculateLights(reflectedRay, reflectedHit);
    
    if (dot(reflectedRay.direction, reflectedHit.normal) >= 0)
        return float3(0.0, 0.0, 0.0);
    
    return reflectionColor;
}

float3 CalculateRefractionOnSurface(Ray ray, RayHit hit) 
{
    float3 refractionColor = float3(0.0, 0.0, 0.0);
    
    float R = CalculateFresnelEquation(ray, hit);
    
    bool outside = dot(ray.direction, hit.normal);
    float3 bias = 0.001 * hit.normal;
    
    float3 refractDir = normalize(CalculateRefractedRay(ray, hit));
    
    Ray refractedRay = CreateRay(hit.position, refractDir);
    refractedRay.origin = outside? hit.position - bias : hit.position + bias;
    refractedRay.energy = (1 - R);
    
    RayHit refractedHit = Trace(refractedRay);
    refractionColor += refractedRay.energy * CalculateLights(refractedRay, refractedHit);
    
    Ray reflectedRay = CreateRay(hit.position, reflect(ray.direction, hit.normal));
    reflectedRay.origin = outside? hit.position + bias : hit.position - bias;
    reflectedRay.direction = outside? reflect(ray.direction, hit.normal) : reflect(ray.direction, -hit.normal);
    reflectedRay.energy =  R;
    
    RayHit reflectedHit = Trace(reflectedRay);
    refractionColor += reflectedRay.energy * CalculateLights(reflectedRay, reflectedHit);
    
    return refractionColor;
}

float3 ShadeOnce(Ray ray, RayHit hit) 
{
    float3 color = float3(0.0, 0.0, 0.0);
    
    color += CalculateLights(ray, hit);
    color += CalculateReflectionOnSurface(ray, hit);
    
    if (length(_MaterialList[hit.materialID].transparency) > 0)
        color += CalculateRefractionOnSurface(ray, hit);
    
    return color;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF) 
    {        
        float3 color = CalculateLights(ray, hit);
        
        if (length(_MaterialList[hit.materialID].mirrorRef) == 0 && 
                length(_MaterialList[hit.materialID].transparency) == 0) 
        {
            ray.energy = 0; 
        }
        else 
        {
            if (length(_MaterialList[hit.materialID].mirrorRef) > length(_MaterialList[hit.materialID].transparency)) 
            {                
                // Ray reflects, next iteration in the main loop calculates its value
                ray.origin = hit.position + hit.normal * 0.001f;
                ray.direction = reflect(ray.direction, hit.normal);
                ray.energy *= _MaterialList[hit.materialID].mirrorRef;
            }
            else 
            {
                // TODO: Calculate reflection color with a new ray and add it to the color
                
                
                // TODO: Calculate refraction color with a new ray and add it to the color
                
                float R = CalculateFresnelEquation(ray, hit);
                
                bool outside = dot(ray.direction, hit.normal) < 0; 
                float3 bias = 0.001 * hit.normal; 
                    
                float3 refractDir = normalize(CalculateRefractedRay(ray, hit));
                    
                    // Calculate and add refracted color then return reflected ray to main.
                if (R > 0.5) 
                {   
                    Ray refractedRay = CreateRay(hit.position, refractDir);
                    refractedRay.origin = outside? hit.position - bias : hit.position + bias;
                    refractedRay.energy = (1 - R) * ray.energy;
                    
                    RayHit refractedHit = Trace(refractedRay);
                    refractedRay.energy *= outside? pow(_MaterialList[hit.materialID].transparency, 
                            length(abs(refractedHit.position - hit.position))) : 1;
                    color += refractedRay.energy * ShadeOnce(refractedRay, refractedHit);
                                            
                    ray.origin = outside? hit.position + bias : hit.position - bias;
                    ray.direction = outside? reflect(ray.direction, hit.normal) : reflect(ray.direction, -hit.normal);
                    ray.energy *= R;
                    ray.energy *= outside? 1 : pow(_MaterialList[hit.materialID].transparency, 2);
                }
                else 
                {
                   Ray reflectedRay = CreateRay(hit.position, reflect(ray.direction, hit.normal));
                   reflectedRay.origin = outside? hit.position + bias : hit.position - bias;
                   reflectedRay.direction = outside? reflect(ray.direction, hit.normal) : reflect(ray.direction, -hit.normal);
                   reflectedRay.energy =  R * ray.energy;
                   
                   RayHit reflectedHit = Trace(reflectedRay);
                   reflectedRay.energy *= outside? 1 : pow(_MaterialList[hit.materialID].transparency, length(abs(reflectedHit.position - hit.position)));
                   color += reflectedRay.energy * ShadeOnce(reflectedRay, reflectedHit);
                      
                   ray.origin = outside? hit.position - bias : hit.position + bias;
                   ray.direction = refractDir;
                   ray.energy *= (1 - R);
                   ray.energy *= outside? pow(_MaterialList[hit.materialID].transparency, 2) : 1;
                   ray.isInObject = !ray.isInObject;
                }
                // Ray refracts, next iteration in the main loop calculates its value
            }
        }
        
        return color;
    }
    else 
    {
        ray.energy = 0.0f;
    
        //float theta = acos(ray.direction.y) / -PI;
        //float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        //return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        return _BackgroundColor;
    }
}

[numthreads(4,4,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    _id = id;
    
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCameraRay(uv);
    
    float3 result = float3(0.0f, 0.0f, 0.0f);
    
    for (uint i = 0; i < _MaxRecursionDepth; i++) 
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        //result += float3(10, 10, 10);
        
        if (!any(ray.energy))
        {
            break;
        }
    }
    
    Result[id.xy] = float4(result, 1);
}