// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

static const float PI = 3.14159265f;

uint _MaxRecursionDepth;

/*-----Skybox-----*/

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float3 _BackgroundColor;

/*-----Camera-----*/

float4x4 _CameraToWorldMatrix;
float4x4 _CameraInverseProjectionMatrix;

/*-----Lights-----*/

float4 _DirectionalLightDirection;
float4 _DirectionalLightColor;

float3 _AmbientLight;

uint _PointLightCount;

struct PointLight 
{
    uint id;
    float3 position;
    float3 intensity;
};

StructuredBuffer<PointLight> _PointLightList;

/*-----Material-----*/

uint _MaterialCount;

struct MaterialData 
{
    uint id;
    float3 ambientRef;
    float3 diffuseRef;
    float3 specularRef;
    float3 mirrorRef;
    float3 transparency;
    
    float phongExponent;
    float refractionIndex;
};

StructuredBuffer<MaterialData> _MaterialList;

/*-----SceneGeometry-----*/

uint _SphereCount;
uint _MeshCount;

uint _SizeOfVertexList;
uint _SizeOfTriangleList;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct MeshData 
{
    uint id;
    uint materialID;
    
    uint triangleIndexStart;
    uint triangleIndexEnd;
    uint vertexIndexStart;
    
    float3 position;
    float scale;
    float3 rotation;
};

StructuredBuffer<Sphere> _SphereList;

StructuredBuffer<float3> _VertexList;
StructuredBuffer<float3> _TriangleList;
StructuredBuffer<MeshData> _MeshDataList;

/*-----Ray & RayHit-----*/

struct Ray 
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit 
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

/*--------------------------*/

Ray CreateRay(float3 origin, float3 direction) 
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

RayHit CreateRayHit() 
{
    RayHit rayHit;
    rayHit.position = float3(0.0f, 0.0f, 0.0f);
    rayHit.distance = 1.#INF;
    rayHit.normal = float3(0.0f, 0.0f, 0.0f);
    rayHit.specular = float3(0.0f, 0.0f, 0.0f);
    rayHit.albedo = float3(0.0f, 0.0f, 0.0f);
    
    return rayHit;
}

Ray CreateCameraRay(float2 uv) 
{
    float3 origin = mul(_CameraToWorldMatrix, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    float3 direction = mul(_CameraInverseProjectionMatrix, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorldMatrix, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.5f, 0.5f, 0.5f);
        bestHit.specular = float3(0.5f, 0.5f, 0.5f);
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

void IntersectTriangle(Ray ray, inout RayHit bestHit, MeshData meshData, float3 a, float3 b, float3 c) 
{
        a *= meshData.scale;
        b *= meshData.scale;
        c *= meshData.scale;
        
        a += meshData.position;
        b += meshData.position;
        c += meshData.position;
        
        float3 ab = a - b;
        float3 ac = a - c;

        // Intermediate products
        float ei_hf, gf_di, dh_eg;

        ei_hf = ac.y * ray.direction.z - ray.direction.y * ac.z;
        gf_di = ray.direction.x * ac.z - ac.x * ray.direction.z;
        dh_eg = ac.x * ray.direction.y - ac.y * ray.direction.x;

        float ak_jb, jc_al, bl_kc;
        float j,k,l;

        j = a.x - ray.origin.x;
        k = a.y - ray.origin.y;
        l = a.z - ray.origin.z;

        ak_jb = ab.x * k - j * ab.y;
        jc_al = j * ab.z - ab.x * l;
        bl_kc = ab.y * l - k * ab.z;

        float M = ab.x * (ei_hf) + 
                  ab.y * (gf_di) +
                  ab.z * (dh_eg);

        float t = - (ac.z * ak_jb +
                   ac.y * jc_al +
                   ac.x * bl_kc) / M;

        // Check for intersection
        if (t <= 0) {
            //return false;
        } else {
            float gamma = (ray.direction.z * ak_jb +
                           ray.direction.y * jc_al +
                           ray.direction.x * bl_kc) / M; 

            if (gamma < 0 || gamma > 1) {
                //return false;
            } else {
                float beta = (j * ei_hf +
                              k * gf_di +
                              l * dh_eg) / M;
                if (beta < 0 || beta > 1 - gamma) {
                    //return false;
                } else {
                    // Fill out hit record
                    if (bestHit.distance > t) {
                        bestHit.distance = t;
                        float3 normal = normalize(cross((b - a), (c - a)));
                        bestHit.normal = normal;
                        bestHit.position = ray.origin + t * ray.direction;
                        bestHit.albedo = _MaterialList[meshData.materialID].diffuseRef;
                        bestHit.specular = _MaterialList[meshData.materialID].specularRef;
                    }
                    //return true;
                }
            }
        }

        //return false;
}

void IntersectMesh(Ray ray, inout RayHit bestHit, MeshData meshData) 
{
    for (uint i = meshData.triangleIndexStart; i < meshData.triangleIndexEnd; i += 3) 
    {
        IntersectTriangle(ray, bestHit, meshData, 
                                        _VertexList[_TriangleList[i].x + meshData.vertexIndexStart],
                                        _VertexList[_TriangleList[i].y + meshData.vertexIndexStart],
                                        _VertexList[_TriangleList[i].z + meshData.vertexIndexStart]
                                        );
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    
    for (uint i = 0; i < _SphereCount; i++) 
    {
        IntersectSphere(ray, bestHit, _SphereList[i]);
    }
    
    for (uint i = 0; i < _MeshCount; i++) 
    {
        IntersectMesh(ray, bestHit, _MeshDataList[i]);
    }
    
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF) 
    {        
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;
        
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLightDirection.xyz);
        RayHit shadowHit = Trace(shadowRay);
        
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }
        
        // TODO: Directional light color is not used.
        return saturate(dot(hit.normal, _DirectionalLightDirection.xyz) * -1) * _DirectionalLightColor.w * hit.albedo;

    }
    else 
    {
        ray.energy = 0.0f;
    
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    
    Ray ray = CreateCameraRay(uv);
    float3 result = float3(0.0f, 0.0f, 0.0f);
    
    for (int i = 0; i < 8; i++) 
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        
        if (!any(ray.energy))
        {
            break;
        }
    }
    
    Result[id.xy] = float4(result, 1);
}